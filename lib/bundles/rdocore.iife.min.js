var RandomOrgCore=function(e){"use strict";var t={};t.RandomOrgBadHTTPResponseError=class extends Error{constructor(e){super(e)}},t.RandomOrgInsufficientBitsError=class extends Error{#bits=-1;constructor(e,t){super(e),this.#bits=t}getBitsLeft(){return this.#bits}},t.RandomOrgInsufficientRequestsError=class extends Error{constructor(e){super(e)}},t.RandomOrgJSONRPCError=class extends Error{constructor(e){super(e)}},t.RandomOrgKeyNotRunningError=class extends Error{constructor(e){super(e)}},t.RandomOrgRANDOMORGError=class extends Error{#code=-1;constructor(e,t=-1){super(e),this.#code=t}getCode(){return this.#code}},t.RandomOrgSendTimeoutError=class extends Error{constructor(e){super(e)}},t.RandomOrgCacheEmptyError=class extends Error{#paused=!1;constructor(e,t=!1){super(e),this.#paused=t}wasPaused(){return this.#paused}};const{RandomOrgInsufficientBitsError:s,RandomOrgCacheEmptyError:r}=t;var a=class{#requestFunction=null;#request=null;#bulkRequestNumber=0;#requestNumber=0;#requestSize=-1;#stack=[];#cacheSize=10;#paused=!1;#bitsUsed=0;#requestsUsed=0;#currentlyPopulating=!1;#error=null;constructor(e,t,s,r,a,i){this.#requestFunction=e,this.#request=t,this.#cacheSize=s,this.#bulkRequestNumber=r,this.#requestNumber=a,this.#requestSize=i,this.#populate()}#populate=async()=>{if(!this.#currentlyPopulating&&!this.#paused){this.#currentlyPopulating=!0;let e=null;for(;null==this.#error;)if(this.#bulkRequestNumber>0){if(!(this.#stack.length<=this.#cacheSize-this.#bulkRequestNumber))break;try{e=await this.#requestFunction(this.#request),this.#addResponse(e,!0)}catch(t){if(t instanceof s){let s=t.getBitsLeft();if(s>this.#requestSize){let t=Math.floor(s/this.#requestSize);this.#request.params.n=t*this.#requestNumber,e=await this.#requestFunction(this.#request),this.#addResponse(e,!0),this.#request.params.n=this.#bulkRequestNumber*this.#requestNumber}else this.#error=t}else this.#error=t}}else{if(!(this.#stack.length<this.#cacheSize))break;try{e=await this.#requestFunction(this.#request),this.#addResponse(e,!1)}catch(e){this.#error=e}}this.#currentlyPopulating=!1}};stop(){this.#paused=!0}resume(){this.#paused=!1,this.#refresh()}isPaused(){return this.#paused}get(){if(null!=this.#error)throw this.#error;if(this.#stack&&0==this.#stack.length)throw this.#paused?new r("The RandomOrgCache stack is empty and the cache is paused. Please call resume() to restart populating the cache.",!0):new r("The RandomOrgCache stack is empty, please wait for it to repopulate itself.");{let e=this.#stack.pop();return this.#refresh(),e}}async getOrWait(){try{return this.get()}catch(e){if(e instanceof r){if(this.#paused)throw e;return 0==await this.#populate()&&await new Promise((e=>setTimeout(e,50))),this.getOrWait()}}}getCachedValues(){return this.#stack.length}getBitsUsed(){return this.#bitsUsed}getRequestsUsed(){return this.#requestsUsed}#refresh=()=>{(this.#bulkRequestNumber>0&&this.#stack.length<=this.#cacheSize-this.#bulkRequestNumber||this.#bulkRequestNumber<=0&&this.#stack.length<this.#cacheSize)&&this.#populate()};#addResponse=(e,t)=>{if(this.#requestsUsed++,this.#bitsUsed+=e.result.bitsUsed,t){let t=e.result.random.data;for(let e=0;e<t.length;e+=this.#requestNumber)this.#stack.push(t.slice(e,e+this.#requestNumber))}else this.#stack.push(e.result.random.data)}};const{RandomOrgBadHTTPResponseError:i,RandomOrgInsufficientBitsError:n,RandomOrgInsufficientRequestsError:u,RandomOrgJSONRPCError:c,RandomOrgKeyNotRunningError:o,RandomOrgRANDOMORGError:l,RandomOrgSendTimeoutError:h}=t,d=a;var E=class e{static#INTEGER_METHOD="generateIntegers";static#INTEGER_SEQUENCE_METHOD="generateIntegerSequences";static#DECIMAL_FRACTION_METHOD="generateDecimalFractions";static#GAUSSIAN_METHOD="generateGaussians";static#STRING_METHOD="generateStrings";static#UUID_METHOD="generateUUIDs";static#BLOB_METHOD="generateBlobs";static#GET_USAGE_METHOD="getUsage";static#SIGNED_INTEGER_METHOD="generateSignedIntegers";static#SIGNED_INTEGER_SEQUENCE_METHOD="generateSignedIntegerSequences";static#SIGNED_DECIMAL_FRACTION_METHOD="generateSignedDecimalFractions";static#SIGNED_GAUSSIAN_METHOD="generateSignedGaussians";static#SIGNED_STRING_METHOD="generateSignedStrings";static#SIGNED_UUID_METHOD="generateSignedUUIDs";static#SIGNED_BLOB_METHOD="generateSignedBlobs";static#GET_RESULT_METHOD="getResult";static#CREATE_TICKET_METHOD="createTickets";static#LIST_TICKET_METHOD="listTickets";static#GET_TICKET_METHOD="getTicket";static#VERIFY_SIGNATURE_METHOD="verifySignature";static BLOB_FORMAT_BASE64="base64";static BLOB_FORMAT_HEX="hex";static DEFAULT_REPLACEMENT=!0;static DEFAULT_BASE=10;static DEFAULT_USER_DATA=null;static DEFAULT_TICKET_ID=null;static DEFAULT_PREGENERATED_RANDOMIZATION=null;static DEFAULT_LICENSE_DATA=null;static UUID_SIZE=122;static DEFAULT_BLOCKING_TIMEOUT=864e5;static DEFAULT_HTTP_TIMEOUT=12e4;static MAX_URL_LENGTH=2046;static#DEFAULT_DELAY=1e3;static#ALLOWANCE_STATE_REFRESH_SECONDS=36e5;#bitsLeft=-1;#requestsLeft=-1;#backoff=-1;#backoffError="";#apiKey="";#blockingTimeout=e.DEFAULT_BLOCKING_TIMEOUT;#httpTimeout=e.DEFAULT_HTTP_TIMEOUT;#advisoryDelay=0;#lastResponseReceivedTime=0;static#keyIndexedInstances={};static#ERROR_CODES=[100,101,200,201,202,203,204,300,301,302,303,304,305,306,307,400,401,402,403,404,405,420,421,422,423,424,425,500,32e3];constructor(t,s={}){if(e.#keyIndexedInstances&&e.#keyIndexedInstances[t])return e.#keyIndexedInstances[t];this.#apiKey=t,this.#blockingTimeout=s.blockingTimeout||864e5,this.#httpTimeout=s.httpTimeout||12e4,e.#keyIndexedInstances[t]=this}async generateIntegers(e,t,s,r={}){let a=this.#integerRequest(e,t,s,r);return this.#extractBasic(this.#sendRequest(a))}async generateIntegerSequences(e,t,s,r,a={}){let i=this.#integerSequenceRequest(e,t,s,r,a);return this.#extractBasic(this.#sendRequest(i))}async generateDecimalFractions(e,t,s={}){let r=this.#decimalFractionRequest(e,t,s);return this.#extractBasic(this.#sendRequest(r))}async generateGaussians(e,t,s,r,a={}){let i=this.#gaussianRequest(e,t,s,r,a);return this.#extractBasic(this.#sendRequest(i))}async generateStrings(e,t,s,r={}){let a=this.#stringRequest(e,t,s,r);return this.#extractBasic(this.#sendRequest(a))}async generateUUIDs(e,t={}){let s=this.#UUIDRequest(e,t);return this.#extractBasic(this.#sendRequest(s))}async generateBlobs(e,t,s={}){let r=this.#blobRequest(e,t,s);return this.#extractBasic(this.#sendRequest(r))}async generateSignedIntegers(e,t,s,r={}){let a=this.#integerRequest(e,t,s,r,!0);return this.#extractSigned(this.#sendRequest(a))}async generateSignedIntegerSequences(e,t,s,r,a={}){let i=this.#integerSequenceRequest(e,t,s,r,a,!0);return this.#extractSigned(this.#sendRequest(i))}async generateSignedDecimalFractions(e,t,s={}){let r=this.#decimalFractionRequest(e,t,s,!0);return this.#extractSigned(this.#sendRequest(r))}async generateSignedGaussians(e,t,s,r,a={}){let i=this.#gaussianRequest(e,t,s,r,a,!0);return this.#extractSigned(this.#sendRequest(i))}async generateSignedStrings(e,t,s,r={}){let a=this.#stringRequest(e,t,s,r,!0);return this.#extractSigned(this.#sendRequest(a))}async generateSignedUUIDs(e,t={}){let s=this.#UUIDRequest(e,t,!0);return this.#extractSigned(this.#sendRequest(s))}async generateSignedBlobs(e,t,s={}){let r=this.#blobRequest(e,t,s,!0);return this.#extractSigned(this.#sendRequest(r))}async verifySignature(t,s){let r={random:t,signature:s},a=this.#generateRequest(e.#VERIFY_SIGNATURE_METHOD,r);return this.#extractVerification(this.#sendRequest(a))}async getBitsLeft(){let t=Date.now()>this.#lastResponseReceivedTime+e.#ALLOWANCE_STATE_REFRESH_SECONDS;return(this.#bitsLeft<0||t)&&await this.#getUsage(),this.#bitsLeft}async getRequestsLeft(){let t=Date.now()>this.#lastResponseReceivedTime+e.#ALLOWANCE_STATE_REFRESH_SECONDS;return(this.#requestsLeft<0||t)&&await this.#getUsage(),this.#requestsLeft}async getResult(t){let s={serialNumber:t},r=this.#generateKeyedRequest(e.#GET_RESULT_METHOD,s);return this.#extractSigned(this.#sendRequest(r))}async createTickets(t,s){let r={n:t,showResult:s},a=this.#generateKeyedRequest(e.#CREATE_TICKET_METHOD,r);return this.#extractResult(this.#sendRequest(a))}async listTickets(t){let s={ticketType:t},r=this.#generateKeyedRequest(e.#LIST_TICKET_METHOD,s);return this.#extractResult(this.#sendRequest(r))}async getTicket(t){let s={ticketId:t},r=this.#generateRequest(e.#GET_TICKET_METHOD,s);return this.#extractResult(this.#sendRequest(r))}createUrl(t,s){let r="https://api.random.org/signatures/form?format=json";if(r+="&random="+this.#formatUrl(JSON.stringify(t)),r+="&signature="+this.#formatUrl(s),r.length>e.MAX_URL_LENGTH)throw new l("Error: URL exceeds maximum length("+e.MAX_URL_LENGTH+" characters).");return r}createHtml(e,t){let s="<form action='https://api.random.org/signatures/form' method='post'>\n";return s+="  "+this.#inputHTML("hidden","format","json")+"\n",s+="  "+this.#inputHTML("hidden","random",JSON.stringify(e))+"\n",s+="  "+this.#inputHTML("hidden","signature",t)+"\n",s+="  <input type='submit' value='Validate' />\n</form>",s}createIntegerCache(e,t,s,r={}){let a=r.cacheSize||20;a<2&&(a=2);let i=this.#integerRequest(e,t,s,r),n=Math.ceil(Math.log(s-t+1)/Math.log(2)*e),u=0;return"replacement"in r&&!0!==r.replacement||(u=a/2,i.params.n=e*u),new d(this.#sendRequest.bind(this),i,a,u,e,n)}createIntegerSequenceCache(e,t,s,r,a={}){let i=a.cacheSize||20;i<2&&(i=2);let n,u=Math.ceil(Math.log(this.#maxValue(r)-this.#minValue(s),1)/Math.log(2)*e*this.#maxValue(t)),c=0;n=a.replacement&&Array.isArray(a.replacement)?a.replacement.every((e=>!0===e)):a.replacement||!0,n&&(c=i/2,Array.isArray(t)&&(t=this.#adjust(t,c)),Array.isArray(s)&&(s=this.#adjust(s,c)),Array.isArray(r)&&(r=this.#adjust(r,c)),a.replacement&&Array.isArray(a.replacement)&&(a.replacement=this.#adjust(a.replacement,c)),a.base&&Array.isArray(a.base)&&(a.base=this.#adjust(a.base,c)));let o=this.#integerSequenceRequest(e,t,s,r,a);return n&&(o.params.n=c*e),new d(this.#sendRequest.bind(this),o,i,c,e,u)}createDecimalFractionCache(e,t,s={}){let r=s.cacheSize||20;r<2&&(r=2);let a=this.#decimalFractionRequest(e,t,s),i=0;"replacement"in s&&!0!==s.replacement||(i=r/2,a.params.n=e*i);let n=Math.ceil(Math.log(10)/Math.log(2)*t*e);return new d(this.#sendRequest.bind(this),a,r,i,e,n)}createGaussianCache(e,t,s,r,a={}){let i=a.cacheSize||20;i<2&&(i=2);let n=Math.ceil(Math.log(Math.pow(10,r))/Math.log(2)*e),u=i/2,c=this.#gaussianRequest(e*u,t,s,r);return new d(this.#sendRequest.bind(this),c,i,u,e,n)}createStringCache(e,t,s,r={}){let a=r.cacheSize||20;a<2&&(a=2);let i=this.#stringRequest(e,t,s,r),n=Math.ceil(Math.log(s.length)/Math.log(2)*t*e),u=0;return"replacement"in r&&!0!==r.replacement||(u=a/2,i.params.n=e*u),new d(this.#sendRequest.bind(this),i,a,u,e,n)}createUUIDCache(t,s={}){let r=s.cacheSize||10;r<2&&(r=2);let a=t*e.UUID_SIZE,i=r/2,n=this.#UUIDRequest(t*i);return new d(this.#sendRequest.bind(this),n,r,i,t,a)}createBlobCache(e,t,s={}){let r=s.cacheSize||10;r<2&&(r=2);let a=e*t,i=r/2,n=this.#blobRequest(e*i,t,s);return new d(this.#sendRequest.bind(this),n,r,i,e,a)}#sendRequest=async function(t){if(-1!=this.#backoff){if(Date.now()<this.#backoff)throw new u(this.#backoffError);this.#backoff=-1,this.#backoffError=null}let s=this.#advisoryDelay-(Date.now()-this.#lastResponseReceivedTime);if(-1!=this.#blockingTimeout&&s>this.#blockingTimeout)throw new h("The server advisory delay of "+s+"millis is greater than the defined maximum allowed blocking time of "+this.#blockingTimeout+"millis.");s>0&&await new Promise((e=>setTimeout(e,s)));let r=this.#httpTimeout;return new Promise((function(e){let s=new XMLHttpRequest;s.open("POST","https://api.random.org/json-rpc/4/invoke"),s.setRequestHeader("Content-Type","application/json"),s.ontimeout=function(){throw new h("The maximum allowed blocking time of "+r+"millis has been exceeded while waiting for the server to respond.")},s.onload=function(){if(!(this.status>=200&&this.status<300))throw new i("Error: "+s.status);e(s.responseText)},s.onerror=function(e){throw e instanceof Error?e:(console.info("** An error occurred during the transaction."),new Error(s.responseText))},s.timeout=r,s.send(JSON.stringify(t))})).then((s=>{if((s=JSON.parse(s)).error){let t=s.error.code,r=s.error.message,a=s.error.data;if(401==t)throw new o("Error "+t+": "+r);if(402==t){let e=(new Date).setUTCHours(0,0,0,0);throw this.#backoff=+e,this.#backoffError="Error "+t+": "+r,this.#requestsLeft=a[1],new u(this.#backoffError)}throw 403==t?(this.#bitsLeft=a[1],new n("Error"+t+": "+r,this.#bitsLeft)):e.#ERROR_CODES.includes(t)?new l("Error "+t+": "+r,t):new c("Error "+t+": "+r)}return[e.#VERIFY_SIGNATURE_METHOD,e.#GET_RESULT_METHOD,e.#CREATE_TICKET_METHOD,e.#LIST_TICKET_METHOD,e.#GET_TICKET_METHOD].includes(t.method)?this.#advisoryDelay=e.#DEFAULT_DELAY:(this.#requestsLeft=s.result.requestsLeft,this.#bitsLeft=s.result.bitsLeft,s.result.advisoryDelay?this.#advisoryDelay=s.result.advisoryDelay:this.#advisoryDelay=e.#DEFAULT_DELAY),this.#lastResponseReceivedTime=Date.now(),s}))};#getUsage=async()=>{let t=this.#generateKeyedRequest(e.#GET_USAGE_METHOD,{});return this.#extractResult(this.#sendRequest(t))};#generateRequest=(e,t)=>({jsonrpc:"2.0",method:e,params:t,id:this.#uuidv4()});#generateKeyedRequest=(e,t)=>(t.apiKey=this.#apiKey,this.#generateRequest(e,t));#extractBasic=async e=>e.then((e=>e.result.random.data));#extractSigned=async e=>e.then((e=>({data:e.result.random.data,random:e.result.random,signature:e.result.signature})));#extractVerification=async e=>e.then((e=>e.result.authenticity));#extractResult=async e=>e.then((e=>e.result));#integerRequest=(t,s,r,{replacement:a=!0,base:i=10,pregeneratedRandomization:n=null,licenseData:u=null,userData:c=null,ticketId:o=null}={},l=!1)=>{let h={n:t,min:s,max:r,replacement:a,base:i};h=this.#addOptionalParams(h,n,u,c,o,l);let d=l?e.#SIGNED_INTEGER_METHOD:e.#INTEGER_METHOD;return this.#generateKeyedRequest(d,h)};#integerSequenceRequest=(t,s,r,a,{replacement:i=!0,base:n=10,pregeneratedRandomization:u=null,licenseData:c=null,userData:o=null,ticketId:l=null}={},h=!1)=>{let d={n:t,length:s,min:r,max:a,replacement:i,base:n};d=this.#addOptionalParams(d,u,c,o,l,h);let E=h?e.#SIGNED_INTEGER_SEQUENCE_METHOD:e.#INTEGER_SEQUENCE_METHOD;return this.#generateKeyedRequest(E,d)};#decimalFractionRequest=(t,s,{replacement:r=!0,pregeneratedRandomization:a=null,licenseData:i=null,userData:n=null,ticketId:u=null}={},c=!1)=>{let o={n:t,decimalPlaces:s,replacement:r};o=this.#addOptionalParams(o,a,i,n,u,c);let l=c?e.#SIGNED_DECIMAL_FRACTION_METHOD:e.#DECIMAL_FRACTION_METHOD;return this.#generateKeyedRequest(l,o)};#gaussianRequest=(t,s,r,a,{pregeneratedRandomization:i=null,licenseData:n=null,userData:u=null,ticketId:c=null}={},o=!1)=>{let l={n:t,mean:s,standardDeviation:r,significantDigits:a};l=this.#addOptionalParams(l,i,n,u,c,o);let h=o?e.#SIGNED_GAUSSIAN_METHOD:e.#GAUSSIAN_METHOD;return this.#generateKeyedRequest(h,l)};#stringRequest=(t,s,r,{replacement:a=!0,pregeneratedRandomization:i=null,licenseData:n=null,userData:u=null,ticketId:c=null}={},o=!1)=>{let l={n:t,length:s,characters:r,replacement:a};l=this.#addOptionalParams(l,i,n,u,c,o);let h=o?e.#SIGNED_STRING_METHOD:e.#STRING_METHOD;return this.#generateKeyedRequest(h,l)};#UUIDRequest=(t,{pregeneratedRandomization:s=null,licenseData:r=null,userData:a=null,ticketId:i=null}={},n=!1)=>{let u={n:t};u=this.#addOptionalParams(u,s,r,a,i,n);let c=n?e.#SIGNED_UUID_METHOD:e.#UUID_METHOD;return this.#generateKeyedRequest(c,u)};#blobRequest=(t,s,{format:r=this.BASE64,pregeneratedRandomization:a=null,licenseData:i=null,userData:n=null,ticketId:u=null},c=!1)=>{let o={n:t,size:s,format:r};o=this.#addOptionalParams(o,a,i,n,u,c);let l=c?e.#SIGNED_BLOB_METHOD:e.#BLOB_METHOD;return this.#generateKeyedRequest(l,o)};#addOptionalParams=(e,t,s,r,a,i=!1)=>(e.pregeneratedRandomization=t,i&&(e.licenseData=s,e.userData=r,e.ticketId=a),e);#adjust=(e,t)=>Array.from({length:t},(()=>e)).flat();#maxValue=e=>Array.isArray(e)?e.reduce((function(e,t){return Math.max(e,t)})):e;#minValue=e=>Array.isArray(e)?e.reduce((function(e,t){return Math.min(e,t)})):e;#formatUrl=e=>{if(!/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(e))try{window&&(e=btoa(e))}catch(t){t instanceof ReferenceError&&(e=Buffer.from(e).toString("base64"))}return e=(e=(e=e.replace(/=/g,"%3D")).replace(/\+/g,"%2B")).replace(/\//g,"%2F")};#inputHTML=(e,t,s)=>"<input type='"+e+"' name='"+t+"' value='"+s+"' />";#uuidv4=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))};let g=t.RandomOrgRANDOMORGError,R=t.RandomOrgBadHTTPResponseError,m=t.RandomOrgInsufficientBitsError,T=t.RandomOrgInsufficientRequestsError,p=t.RandomOrgJSONRPCError,D=t.RandomOrgKeyNotRunningError,O=t.RandomOrgSendTimeoutError,S=t.RandomOrgCacheEmptyError;return e.RandomOrgBadHTTPResponseError=R,e.RandomOrgCache=a,e.RandomOrgCacheEmptyError=S,e.RandomOrgClient=E,e.RandomOrgInsufficientBitsError=m,e.RandomOrgInsufficientRequestsError=T,e.RandomOrgJSONRPCError=p,e.RandomOrgKeyNotRunningError=D,e.RandomOrgRANDOMORGError=g,e.RandomOrgSendTimeoutError=O,e.default=E,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
