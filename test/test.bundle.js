"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var e={};e.RandomOrgBadHTTPResponseError=class extends Error{constructor(e){super(e)}},e.RandomOrgInsufficientBitsError=class extends Error{#bits=-1;constructor(e,t){super(e),this.#bits=t}getBitsLeft(){return this.#bits}},e.RandomOrgInsufficientRequestsError=class extends Error{constructor(e){super(e)}},e.RandomOrgJSONRPCError=class extends Error{constructor(e){super(e)}},e.RandomOrgKeyNotRunningError=class extends Error{constructor(e){super(e)}},e.RandomOrgRANDOMORGError=class extends Error{#code=-1;constructor(e,t=-1){super(e),this.#code=t}getCode(){return this.#code}},e.RandomOrgSendTimeoutError=class extends Error{constructor(e){super(e)}},e.RandomOrgCacheEmptyError=class extends Error{#paused=!1;constructor(e,t=!1){super(e),this.#paused=t}wasPaused(){return this.#paused}};const{RandomOrgInsufficientBitsError:t,RandomOrgCacheEmptyError:a}=e;const{RandomOrgBadHTTPResponseError:r,RandomOrgInsufficientBitsError:n,RandomOrgInsufficientRequestsError:s,RandomOrgJSONRPCError:i,RandomOrgKeyNotRunningError:o,RandomOrgRANDOMORGError:c,RandomOrgSendTimeoutError:l}=e,d=class{#requestFunction=null;#request=null;#bulkRequestNumber=0;#requestNumber=0;#requestSize=-1;#stack=[];#cacheSize=10;#paused=!1;#bitsUsed=0;#requestsUsed=0;#currentlyPopulating=!1;#error=null;constructor(e,t,a,r,n,s){this.#requestFunction=e,this.#request=t,this.#cacheSize=a,this.#bulkRequestNumber=r,this.#requestNumber=n,this.#requestSize=s,this.#populate()}#populate=async()=>{if(!this.#currentlyPopulating&&!this.#paused){this.#currentlyPopulating=!0;let e=null;for(;null==this.#error;)if(this.#bulkRequestNumber>0)if(this.#stack.length<=this.#cacheSize-this.#bulkRequestNumber)try{e=await this.#requestFunction(this.#request),this.#addResponse(e,!0)}catch(a){if(a instanceof t){let t=a.getBitsLeft();if(t>this.#requestSize){let a=Math.floor(t/this.#requestSize);this.#request.params.n=a*this.#requestNumber,e=await this.#requestFunction(this.#request),this.#addResponse(e,!0),this.#request.params.n=this.#bulkRequestNumber*this.#requestNumber}else this.#error=a}else this.#error=a}else break;else if(this.#stack.length<this.#cacheSize)try{e=await this.#requestFunction(this.#request),this.#addResponse(e,!1)}catch(e){this.#error=e}else break;this.#currentlyPopulating=!1}};stop(){this.#paused=!0}resume(){this.#paused=!1,this.#refresh()}isPaused(){return this.#paused}get(){if(null!=this.#error)throw this.#error;if(this.#stack&&0==this.#stack.length)if(this.#paused)throw new a("The RandomOrgCache stack is empty and the cache is paused. Please call resume() to restart populating the cache.",!0);else throw new a("The RandomOrgCache stack is empty, please wait for it to repopulate itself.");else{let e=this.#stack.pop();return this.#refresh(),e}}async getOrWait(){try{return this.get()}catch(e){if(e instanceof a){if(this.#paused)throw e;if(0==await this.#populate())await new Promise((e=>setTimeout(e,50)));return this.getOrWait()}}}getCachedValues(){return this.#stack.length}getBitsUsed(){return this.#bitsUsed}getRequestsUsed(){return this.#requestsUsed}#refresh=()=>{if(this.#bulkRequestNumber>0&&this.#stack.length<=this.#cacheSize-this.#bulkRequestNumber)this.#populate();else if(this.#bulkRequestNumber<=0&&this.#stack.length<this.#cacheSize)this.#populate()};#addResponse=(e,t)=>{if(this.#requestsUsed++,this.#bitsUsed+=e.result.bitsUsed,t){let t=e.result.random.data;for(let e=0;e<t.length;e+=this.#requestNumber)this.#stack.push(t.slice(e,e+this.#requestNumber))}else this.#stack.push(e.result.random.data)}};var u=class e{static#INTEGER_METHOD="generateIntegers";static#INTEGER_SEQUENCE_METHOD="generateIntegerSequences";static#DECIMAL_FRACTION_METHOD="generateDecimalFractions";static#GAUSSIAN_METHOD="generateGaussians";static#STRING_METHOD="generateStrings";static#UUID_METHOD="generateUUIDs";static#BLOB_METHOD="generateBlobs";static#GET_USAGE_METHOD="getUsage";static#SIGNED_INTEGER_METHOD="generateSignedIntegers";static#SIGNED_INTEGER_SEQUENCE_METHOD="generateSignedIntegerSequences";static#SIGNED_DECIMAL_FRACTION_METHOD="generateSignedDecimalFractions";static#SIGNED_GAUSSIAN_METHOD="generateSignedGaussians";static#SIGNED_STRING_METHOD="generateSignedStrings";static#SIGNED_UUID_METHOD="generateSignedUUIDs";static#SIGNED_BLOB_METHOD="generateSignedBlobs";static#GET_RESULT_METHOD="getResult";static#CREATE_TICKET_METHOD="createTickets";static#LIST_TICKET_METHOD="listTickets";static#GET_TICKET_METHOD="getTicket";static#VERIFY_SIGNATURE_METHOD="verifySignature";static BLOB_FORMAT_BASE64="base64";static BLOB_FORMAT_HEX="hex";static DEFAULT_REPLACEMENT=!0;static DEFAULT_BASE=10;static DEFAULT_USER_DATA=null;static DEFAULT_TICKET_ID=null;static DEFAULT_PREGENERATED_RANDOMIZATION=null;static DEFAULT_LICENSE_DATA=null;static UUID_SIZE=122;static DEFAULT_BLOCKING_TIMEOUT=864e5;static DEFAULT_HTTP_TIMEOUT=12e4;static MAX_URL_LENGTH=2046;static#DEFAULT_DELAY=1e3;static#ALLOWANCE_STATE_REFRESH_SECONDS=36e5;#bitsLeft=-1;#requestsLeft=-1;#backoff=-1;#backoffError="";#apiKey="";#blockingTimeout=e.DEFAULT_BLOCKING_TIMEOUT;#httpTimeout=e.DEFAULT_HTTP_TIMEOUT;#advisoryDelay=0;#lastResponseReceivedTime=0;static#keyIndexedInstances={};static#ERROR_CODES=[100,101,200,201,202,203,204,300,301,302,303,304,305,306,307,400,401,402,403,404,405,420,421,422,423,424,425,500,32e3];constructor(t,a={}){if(e.#keyIndexedInstances&&e.#keyIndexedInstances[t])return e.#keyIndexedInstances[t];else this.#apiKey=t,this.#blockingTimeout=a.blockingTimeout||864e5,this.#httpTimeout=a.httpTimeout||12e4,e.#keyIndexedInstances[t]=this}async generateIntegers(e,t,a,r={}){let n=this.#integerRequest(e,t,a,r);return this.#extractBasic(this.#sendRequest(n))}async generateIntegerSequences(e,t,a,r,n={}){let s=this.#integerSequenceRequest(e,t,a,r,n);return this.#extractBasic(this.#sendRequest(s))}async generateDecimalFractions(e,t,a={}){let r=this.#decimalFractionRequest(e,t,a);return this.#extractBasic(this.#sendRequest(r))}async generateGaussians(e,t,a,r,n={}){let s=this.#gaussianRequest(e,t,a,r,n);return this.#extractBasic(this.#sendRequest(s))}async generateStrings(e,t,a,r={}){let n=this.#stringRequest(e,t,a,r);return this.#extractBasic(this.#sendRequest(n))}async generateUUIDs(e,t={}){let a=this.#UUIDRequest(e,t);return this.#extractBasic(this.#sendRequest(a))}async generateBlobs(e,t,a={}){let r=this.#blobRequest(e,t,a);return this.#extractBasic(this.#sendRequest(r))}async generateSignedIntegers(e,t,a,r={}){let n=this.#integerRequest(e,t,a,r,!0);return this.#extractSigned(this.#sendRequest(n))}async generateSignedIntegerSequences(e,t,a,r,n={}){let s=this.#integerSequenceRequest(e,t,a,r,n,!0);return this.#extractSigned(this.#sendRequest(s))}async generateSignedDecimalFractions(e,t,a={}){let r=this.#decimalFractionRequest(e,t,a,!0);return this.#extractSigned(this.#sendRequest(r))}async generateSignedGaussians(e,t,a,r,n={}){let s=this.#gaussianRequest(e,t,a,r,n,!0);return this.#extractSigned(this.#sendRequest(s))}async generateSignedStrings(e,t,a,r={}){let n=this.#stringRequest(e,t,a,r,!0);return this.#extractSigned(this.#sendRequest(n))}async generateSignedUUIDs(e,t={}){let a=this.#UUIDRequest(e,t,!0);return this.#extractSigned(this.#sendRequest(a))}async generateSignedBlobs(e,t,a={}){let r=this.#blobRequest(e,t,a,!0);return this.#extractSigned(this.#sendRequest(r))}async verifySignature(t,a){let r={random:t,signature:a},n=this.#generateRequest(e.#VERIFY_SIGNATURE_METHOD,r);return this.#extractVerification(this.#sendRequest(n))}async getBitsLeft(){let t=Date.now()>this.#lastResponseReceivedTime+e.#ALLOWANCE_STATE_REFRESH_SECONDS;if(this.#bitsLeft<0||t)await this.#getUsage();return this.#bitsLeft}async getRequestsLeft(){let t=Date.now()>this.#lastResponseReceivedTime+e.#ALLOWANCE_STATE_REFRESH_SECONDS;if(this.#requestsLeft<0||t)await this.#getUsage();return this.#requestsLeft}async getResult(t){let a={serialNumber:t},r=this.#generateKeyedRequest(e.#GET_RESULT_METHOD,a);return this.#extractSigned(this.#sendRequest(r))}async createTickets(t,a){let r={n:t,showResult:a},n=this.#generateKeyedRequest(e.#CREATE_TICKET_METHOD,r);return this.#extractResult(this.#sendRequest(n))}async listTickets(t){let a={ticketType:t},r=this.#generateKeyedRequest(e.#LIST_TICKET_METHOD,a);return this.#extractResult(this.#sendRequest(r))}async getTicket(t){let a={ticketId:t},r=this.#generateRequest(e.#GET_TICKET_METHOD,a);return this.#extractResult(this.#sendRequest(r))}createUrl(t,a){let r="https://api.random.org/signatures/form?format=json";if(r+="&random="+this.#formatUrl(JSON.stringify(t)),r+="&signature="+this.#formatUrl(a),r.length>e.MAX_URL_LENGTH)throw new c("Error: URL exceeds maximum length("+e.MAX_URL_LENGTH+" characters).");return r}createHtml(e,t){let a="<form action='https://api.random.org/signatures/form' method='post'>\n";return a+="  "+this.#inputHTML("hidden","format","json")+"\n",a+="  "+this.#inputHTML("hidden","random",JSON.stringify(e))+"\n",a+="  "+this.#inputHTML("hidden","signature",t)+"\n",a+="  <input type='submit' value='Validate' />\n</form>",a}createIntegerCache(e,t,a,r={}){let n=r.cacheSize||20;if(n<2)n=2;let s=this.#integerRequest(e,t,a,r),i=Math.ceil(Math.log(a-t+1)/Math.log(2)*e),o=0;if(!("replacement"in r)||!0===r.replacement)o=n/2,s.params.n=e*o;return new d(this.#sendRequest.bind(this),s,n,o,e,i)}createIntegerSequenceCache(e,t,a,r,n={}){let s=n.cacheSize||20;if(s<2)s=2;let i,o=Math.ceil(Math.log(this.#maxValue(r)-this.#minValue(a),1)/Math.log(2)*e*this.#maxValue(t)),c=0;if(n.replacement&&Array.isArray(n.replacement))i=n.replacement.every((e=>!0===e));else i=n.replacement||!0;if(i){if(c=s/2,Array.isArray(t))t=this.#adjust(t,c);if(Array.isArray(a))a=this.#adjust(a,c);if(Array.isArray(r))r=this.#adjust(r,c);if(n.replacement&&Array.isArray(n.replacement))n.replacement=this.#adjust(n.replacement,c);if(n.base&&Array.isArray(n.base))n.base=this.#adjust(n.base,c)}let l=this.#integerSequenceRequest(e,t,a,r,n);if(i)l.params.n=c*e;return new d(this.#sendRequest.bind(this),l,s,c,e,o)}createDecimalFractionCache(e,t,a={}){let r=a.cacheSize||20;if(r<2)r=2;let n=this.#decimalFractionRequest(e,t,a),s=0;if(!("replacement"in a)||!0===a.replacement)s=r/2,n.params.n=e*s;let i=Math.ceil(Math.log(10)/Math.log(2)*t*e);return new d(this.#sendRequest.bind(this),n,r,s,e,i)}createGaussianCache(e,t,a,r,n={}){let s=n.cacheSize||20;if(s<2)s=2;let i=Math.ceil(Math.log(Math.pow(10,r))/Math.log(2)*e),o=s/2,c=this.#gaussianRequest(e*o,t,a,r);return new d(this.#sendRequest.bind(this),c,s,o,e,i)}createStringCache(e,t,a,r={}){let n=r.cacheSize||20;if(n<2)n=2;let s=this.#stringRequest(e,t,a,r),i=Math.ceil(Math.log(a.length)/Math.log(2)*t*e),o=0;if(!("replacement"in r)||!0===r.replacement)o=n/2,s.params.n=e*o;return new d(this.#sendRequest.bind(this),s,n,o,e,i)}createUUIDCache(t,a={}){let r=a.cacheSize||10;if(r<2)r=2;let n=t*e.UUID_SIZE,s=r/2,i=this.#UUIDRequest(t*s);return new d(this.#sendRequest.bind(this),i,r,s,t,n)}createBlobCache(e,t,a={}){let r=a.cacheSize||10;if(r<2)r=2;let n=e*t,s=r/2,i=this.#blobRequest(e*s,t,a);return new d(this.#sendRequest.bind(this),i,r,s,e,n)}#sendRequest=async function(t){if(-1!=this.#backoff)if(Date.now()<this.#backoff)throw new s(this.#backoffError);else this.#backoff=-1,this.#backoffError=null;let a=this.#advisoryDelay-(Date.now()-this.#lastResponseReceivedTime);if(-1!=this.#blockingTimeout&&a>this.#blockingTimeout)throw new l("The server advisory delay of "+a+"millis is greater than the defined maximum allowed blocking time of "+this.#blockingTimeout+"millis.");if(a>0)await new Promise((e=>setTimeout(e,a)));let d=this.#httpTimeout;return new Promise((function(e){let a=new XMLHttpRequest;a.open("POST","https://api.random.org/json-rpc/4/invoke"),a.setRequestHeader("Content-Type","application/json"),a.ontimeout=function(){throw new l("The maximum allowed blocking time of "+d+"millis has been exceeded while waiting for the server to respond.")},a.onload=function(){if(this.status>=200&&this.status<300)e(a.responseText);else throw new r("Error: "+a.status)},a.onerror=function(e){if(e instanceof Error)throw e;else throw console.info("** An error occurred during the transaction."),new Error(a.responseText)},a.timeout=d,a.send(JSON.stringify(t))})).then((a=>{if((a=JSON.parse(a)).error){let t=a.error.code,r=a.error.message,l=a.error.data;if(401==t)throw new o("Error "+t+": "+r);else if(402==t){let e=(new Date).setUTCHours(0,0,0,0);throw this.#backoff=+e,this.#backoffError="Error "+t+": "+r,this.#requestsLeft=l[1],new s(this.#backoffError)}else if(403==t)throw this.#bitsLeft=l[1],new n("Error"+t+": "+r,this.#bitsLeft);else if(e.#ERROR_CODES.includes(t))throw new c("Error "+t+": "+r,t);else throw new i("Error "+t+": "+r)}if(![e.#VERIFY_SIGNATURE_METHOD,e.#GET_RESULT_METHOD,e.#CREATE_TICKET_METHOD,e.#LIST_TICKET_METHOD,e.#GET_TICKET_METHOD].includes(t.method))if(this.#requestsLeft=a.result.requestsLeft,this.#bitsLeft=a.result.bitsLeft,a.result.advisoryDelay)this.#advisoryDelay=a.result.advisoryDelay;else this.#advisoryDelay=e.#DEFAULT_DELAY;else this.#advisoryDelay=e.#DEFAULT_DELAY;return this.#lastResponseReceivedTime=Date.now(),a}))};#getUsage=async()=>{let t=this.#generateKeyedRequest(e.#GET_USAGE_METHOD,{});return this.#extractResult(this.#sendRequest(t))};#generateRequest=(e,t)=>({jsonrpc:"2.0",method:e,params:t,id:this.#uuidv4()});#generateKeyedRequest=(e,t)=>(t.apiKey=this.#apiKey,this.#generateRequest(e,t));#extractBasic=async e=>e.then((e=>e.result.random.data));#extractSigned=async e=>e.then((e=>({data:e.result.random.data,random:e.result.random,signature:e.result.signature})));#extractVerification=async e=>e.then((e=>e.result.authenticity));#extractResult=async e=>e.then((e=>e.result));#integerRequest=(t,a,r,{replacement:n=!0,base:s=10,pregeneratedRandomization:i=null,licenseData:o=null,userData:c=null,ticketId:l=null}={},d=!1)=>{let u={n:t,min:a,max:r,replacement:n,base:s};u=this.#addOptionalParams(u,i,o,c,l,d);let g=d?e.#SIGNED_INTEGER_METHOD:e.#INTEGER_METHOD;return this.#generateKeyedRequest(g,u)};#integerSequenceRequest=(t,a,r,n,{replacement:s=!0,base:i=10,pregeneratedRandomization:o=null,licenseData:c=null,userData:l=null,ticketId:d=null}={},u=!1)=>{let g={n:t,length:a,min:r,max:n,replacement:s,base:i};g=this.#addOptionalParams(g,o,c,l,d,u);let h=u?e.#SIGNED_INTEGER_SEQUENCE_METHOD:e.#INTEGER_SEQUENCE_METHOD;return this.#generateKeyedRequest(h,g)};#decimalFractionRequest=(t,a,{replacement:r=!0,pregeneratedRandomization:n=null,licenseData:s=null,userData:i=null,ticketId:o=null}={},c=!1)=>{let l={n:t,decimalPlaces:a,replacement:r};l=this.#addOptionalParams(l,n,s,i,o,c);let d=c?e.#SIGNED_DECIMAL_FRACTION_METHOD:e.#DECIMAL_FRACTION_METHOD;return this.#generateKeyedRequest(d,l)};#gaussianRequest=(t,a,r,n,{pregeneratedRandomization:s=null,licenseData:i=null,userData:o=null,ticketId:c=null}={},l=!1)=>{let d={n:t,mean:a,standardDeviation:r,significantDigits:n};d=this.#addOptionalParams(d,s,i,o,c,l);let u=l?e.#SIGNED_GAUSSIAN_METHOD:e.#GAUSSIAN_METHOD;return this.#generateKeyedRequest(u,d)};#stringRequest=(t,a,r,{replacement:n=!0,pregeneratedRandomization:s=null,licenseData:i=null,userData:o=null,ticketId:c=null}={},l=!1)=>{let d={n:t,length:a,characters:r,replacement:n};d=this.#addOptionalParams(d,s,i,o,c,l);let u=l?e.#SIGNED_STRING_METHOD:e.#STRING_METHOD;return this.#generateKeyedRequest(u,d)};#UUIDRequest=(t,{pregeneratedRandomization:a=null,licenseData:r=null,userData:n=null,ticketId:s=null}={},i=!1)=>{let o={n:t};o=this.#addOptionalParams(o,a,r,n,s,i);let c=i?e.#SIGNED_UUID_METHOD:e.#UUID_METHOD;return this.#generateKeyedRequest(c,o)};#blobRequest=(t,a,{format:r=this.BASE64,pregeneratedRandomization:n=null,licenseData:s=null,userData:i=null,ticketId:o=null},c=!1)=>{let l={n:t,size:a,format:r};l=this.#addOptionalParams(l,n,s,i,o,c);let d=c?e.#SIGNED_BLOB_METHOD:e.#BLOB_METHOD;return this.#generateKeyedRequest(d,l)};#addOptionalParams=(e,t,a,r,n,s=!1)=>{if(e.pregeneratedRandomization=t,s)e.licenseData=a,e.userData=r,e.ticketId=n;return e};#adjust=(e,t)=>Array.from({length:t},(()=>e)).flat();#maxValue=e=>{if(Array.isArray(e))return e.reduce((function(e,t){return Math.max(e,t)}));else return e};#minValue=e=>{if(Array.isArray(e))return e.reduce((function(e,t){return Math.min(e,t)}));else return e};#formatUrl=e=>{if(!/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(e))try{if(window)e=btoa(e)}catch(t){if(t instanceof ReferenceError)e=Buffer.from(e).toString("base64")}return e=(e=(e=e.replace(/=/g,"%3D")).replace(/\+/g,"%2B")).replace(/\//g,"%2F")};#inputHTML=(e,t,a)=>"<input type='"+e+"' name='"+t+"' value='"+a+"' />";#uuidv4=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))};let g=e.RandomOrgRANDOMORGError,h=(e.RandomOrgBadHTTPResponseError,e.RandomOrgInsufficientBitsError,e.RandomOrgInsufficientRequestsError,e.RandomOrgJSONRPCError,e.RandomOrgKeyNotRunningError,e.RandomOrgSendTimeoutError,e.RandomOrgCacheEmptyError);const f=new u("YOUR_API_KEY_HERE"),m=[3,4,5,6],p=[0,10,20,30],E=[40,50,60,70],R=[!1,!0,!1,!0],y=[2,8,10,16],w="abcdefghijklmnopqrstuvwxyz",S={date:"2010-12-31"},b={id:"foo"},q={foo:"bar"},O=u.BLOB_FORMAT_BASE64,I=u.BLOB_FORMAT_HEX;let D=0,T=0;!async function(){D=await f.getRequestsLeft(),T=await f.getBitsLeft()}(),describe("Errors",(function(){it("RandomOrgRANDOMORGError 202: parameter out of range",(async function(){try{await f.generateIntegers(1e5,0,10);assert.fail("Should have thrown RandomOrgRANDOMORGError 202.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&202==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 202, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 203: parameter is too long",(async function(){try{await f.generateIntegerSequences(3,m,p,E);assert.fail("Should have thrown RandomOrgRANDOMORGError 203.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&203==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 203, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 204: parameter is too short",(async function(){try{await f.generateIntegerSequences(4,[1],p,E);assert.fail("Should have thrown RandomOrgRANDOMORGError 204.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&204==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 204, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 300: parameter must be less than another",(async function(){try{await f.generateIntegers(10,10,0);assert.fail("Should have thrown RandomOrgRANDOMORGError 300.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&300==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 300, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 301: replacement/domain error",(async function(){try{await f.generateIntegers(20,0,9,{replacement:!1});assert.fail("Should have thrown RandomOrgRANDOMORGError 301.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&301==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 301, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 400: API key does not exist",(async function(){let e=new u("ffffffff-ffff-ffff-ffff-ffffffffffff");try{await e.generateIntegers(5,0,10);assert.fail("Should have thrown RandomOrgRANDOMORGError 400.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&400==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 400, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 420: ticket does not exist",(async function(){try{await f.generateSignedUUIDs(1,{ticketId:"ffffffffffffffff"});assert.fail("Should have thrown RandomOrgRANDOMORGError 420.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&420==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 420, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 421: ticket exists, but not for specified API key",(async function(){try{await f.generateSignedUUIDs(1,{ticketId:"d5b8f6d03f99a134"});assert.fail("Should have thrown RandomOrgRANDOMORGError 421.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&421==e.getCode(),"Should have thrown RandomOrgRANDOMORGError 421, instead threw "+e.message)}})),it("RandomOrgRANDOMORGError 422: ticket has already been used",(async function(){try{let e=(await f.createTickets(1,!0))[0].ticketId;if(true)console.log("ticket id: "+e);await f.generateSignedUUIDs(1,{ticketId:e}),await f.generateSignedUUIDs(1,{ticketId:e});assert.fail("Should have thrown RandomOrgRANDOMORGError 422.")}catch(e){if(true)console.log(e.message);assert(e instanceof g&&422==e.getCode())}}))})),describe("General",(function(){it("reusing an API key returns a previously created instance",(function(){let e=new u("YOUR_API_KEY_HERE");assert(f==e,"Error: did not return the same instance.")})),it("a different API key returns a new instance",(function(){let e=new u("ffffffff-ffff-ffff-ffff-ffffffffffff");assert(f!=e,"Error: returned the same instance.")})),it("getRequestsLeft()",(async function(){let e=await f.getRequestsLeft();if(assert(e>=0,"Error: should have returned a number  >= 0, instead retuned "+e),true)console.log("requests remaining: "+e)})),it("getBitsLeft()",(async function(){let e=await f.getBitsLeft();if(assert(e>=0,"Error: should have returned a number  >= 0, instead retuned "+e),true)console.log("bits remaining: "+e)}))})),describe("Basic",(function(){describe("Integers",(function(){it("decimal integers",(async function(){let e=await f.generateIntegers(5,0,10);if(assert(e.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("decimal integers: "+e)})),it("pregenerated decimal integers (date)",(async function(){let e=await f.generateIntegers(5,0,10,{pregeneratedRandomization:S}),t=await f.generateIntegers(5,0,10,{pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated decimal integers (date): "+e+" / "+t)})),it("pregenerated decimal integers (id)",(async function(){let e=await f.generateIntegers(5,0,10,{pregeneratedRandomization:b}),t=await f.generateIntegers(5,0,10,{pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated decimal integers (id): "+e+" / "+t)})),it("non-decimal integers",(async function(){let e=await f.generateIntegers(5,0,10,{replacement:!1,base:2});if(assert(e.every((e=>"string"==typeof e)),"Error: should have returned an array of strings."),true)console.log("non-decimal integers: "+e)})),it("pregenerated non-decimal integers (date)",(async function(){let e=await f.generateIntegers(5,0,10,{replacement:!1,base:2,pregeneratedRandomization:S}),t=await f.generateIntegers(5,0,10,{replacement:!1,base:2,pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated non-decimal integers (date): "+e+" / "+t)})),it("pregenerated non-decimal integers (id)",(async function(){let e=await f.generateIntegers(5,0,10,{replacement:!1,base:2,pregeneratedRandomization:b}),t=await f.generateIntegers(5,0,10,{replacement:!1,base:2,pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated non-decimal integers (id): "+e+" / "+t)}))})),describe("Integer Sequences",(function(){it("uniform decimal integer sequences",(async function(){let e=await f.generateIntegerSequences(3,5,0,10);if(assert(e.every((e=>e.every((e=>"number"==typeof e)))),"Error: should have returned a 2D array of numbers."),true)console.log("uniform decimal integer sequences: "),console.table(e)})),it("uniform pregenerated decimal integer sequences (date)",(async function(){let e=await f.generateIntegerSequences(3,5,0,10,{pregeneratedRandomization:S}),t=await f.generateIntegerSequences(3,5,0,10,{pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("uniform pregenerated decimal integers sequences (date): "),console.table(e),console.table(t)})),it("uniform pregenerated decimal integer sequences (id)",(async function(){let e=await f.generateIntegerSequences(3,5,0,10,{pregeneratedRandomization:b}),t=await f.generateIntegerSequences(3,5,0,10,{pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("uniform pregenerated decimal integers sequences (id): "),console.table(e),console.table(t)})),it("uniform non-decimal integers",(async function(){let e=await f.generateIntegerSequences(3,5,0,10,{base:2});if(assert(e.every((e=>e.every((e=>"string"==typeof e)))),"Error: should have returned a 2D array of strings."),true)console.log("uniform non-decimal integer sequences: "),console.table(e)})),it("uniform pregenerated non-decimal integer sequences (date)",(async function(){let e=await f.generateIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:S}),t=await f.generateIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("uniform pregenerated non-decimal integers sequences (date): "),console.table(e),console.table(t)})),it("uniform pregenerated non-decimal integer sequences (id)",(async function(){let e=await f.generateIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:b}),t=await f.generateIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("uniform pregenerated non-decimal integers sequences (id): "),console.table(e),console.table(t)})),it("multiform integer sequences",(async function(){let e=await f.generateIntegerSequences(4,m,p,E,{replacement:R,base:y});if(assert(e.every(((e,t)=>e.every((e=>typeof e===(10==y[t]?"number":"string"))))),"Error: the type of the values in the 2D array was not as expected."),true)console.log("multiform integer sequences: "),console.table(e)})),it("multiform pregenerated integer sequences (date)",(async function(){let e=await f.generateIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:S}),t=await f.generateIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("multiform pregenerated integers sequences (date): "),console.table(e),console.table(t)})),it("multiform pregenerated integer sequences (id)",(async function(){let e=await f.generateIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:b}),t=await f.generateIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("multiform pregenerated integers sequences (id): "),console.table(e),console.table(t)}))})),describe("Decimal Fractions",(function(){it("decimal fractions",(async function(){let e=await f.generateDecimalFractions(5,4,{replacement:!1});if(assert(e.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("decimal fractions: "+e)})),it("pregenerated decimal fractions (date)",(async function(){let e=await f.generateDecimalFractions(5,4,{pregeneratedRandomization:S}),t=await f.generateDecimalFractions(5,4,{pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated decimal fractions (date): "+e+" / "+t)})),it("pregenerated decimal fractions (id)",(async function(){let e=await f.generateDecimalFractions(5,4,{pregeneratedRandomization:b}),t=await f.generateDecimalFractions(5,4,{pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated decimal fractions (id): "+e+" / "+t)}))})),describe("Gaussians",(function(){it("gaussians",(async function(){let e=await f.generateGaussians(5,3.41,2.1,4);if(assert(e.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("gaussians: "+e)})),it("pregenerated gaussians (date)",(async function(){let e=await f.generateGaussians(5,3.41,2.1,4,{pregeneratedRandomization:S}),t=await f.generateGaussians(5,3.41,2.1,4,{pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated gaussians (date): "+e+" / "+t)})),it("pregenerated gaussians (id)",(async function(){let e=await f.generateGaussians(5,3.41,2.1,4,{pregeneratedRandomization:b}),t=await f.generateGaussians(5,3.41,2.1,4,{pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated gaussians (id): "+e+" / "+t)}))})),describe("Strings",(function(){it("strings, lowercase English alphabet",(async function(){let e=await f.generateStrings(3,5,w);if(assert(e.every((e=>"string"==typeof e)),"Error: should have returned an array of strings."),true)console.log("strings, lowercase English alphabet: "+e)})),it("pregenerated strings, lowercase English alphabet (date)",(async function(){let e=await f.generateStrings(3,5,w,{replacement:!1,pregeneratedRandomization:S}),t=await f.generateStrings(3,5,w,{replacement:!1,pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated strings, lowercase English alphabet (date): "+e+" / "+t)})),it("pregenerated strings, lowercase English alphabet (id)",(async function(){let e=await f.generateStrings(3,5,w,{replacement:!1,pregeneratedRandomization:b}),t=await f.generateStrings(3,5,w,{replacement:!1,pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated strings, lowercase English alphabet (id): "+e+" / "+t)}))})),describe("UUIDs",(function(){it("UUIDs",(async function(){let e=await f.generateUUIDs(3);if(assert(e.every((e=>U(e))),"Error: should have returned an array of UUIDs."),true)console.log("UUIDs: "+e)})),it("pregenerated UUIDs (date)",(async function(){let e=await f.generateUUIDs(3,{pregeneratedRandomization:S}),t=await f.generateUUIDs(3,{pregeneratedRandomization:S});if(assert.deepEqual(e,t),true)console.log("pregenerated UUIDs (date): "+e+" / "+t)})),it("pregenerated UUIDs (id)",(async function(){let e=await f.generateUUIDs(3,{pregeneratedRandomization:b}),t=await f.generateUUIDs(3,{pregeneratedRandomization:b});if(assert.deepEqual(e,t),true)console.log("pregenerated UUIDs (id): "+e+" / "+t)}))})),describe("BLOBs",(function(){it("BLOBs, 128-bit, base64",(async function(){let e=await f.generateBlobs(3,128);if(assert(e.every((e=>_(e))),"Error: should have returned an array of base64 BLOBs."),true)console.log("BLOBs, 128-bit, base64: "+e)})),it("BLOBs, 128-bit, hex",(async function(){let e=await f.generateBlobs(3,128,{format:I});if(assert(e.every((e=>A(e,128))),"Error: should have returned an array of hex BLOBs."),true)console.log("BLOBs, 128-bit, hex: "+e)})),it("pregenerated BLOBs (date)",(async function(){let e=await f.generateBlobs(3,64,{format:I,pregeneratedRandomization:S}),t=await f.generateBlobs(3,64,{format:I,pregeneratedRandomization:S});if(assert.deepEqual(e,t),assert(e.every((e=>A(e,64))),"Error: should have returned an array of hex BLOBs."),true)console.log("pregenerated BLOBs (date): "+e+" / "+t)})),it("pregenerated BLOBs (id)",(async function(){let e=await f.generateBlobs(3,64,{format:I,pregeneratedRandomization:b}),t=await f.generateBlobs(3,64,{format:I,pregeneratedRandomization:b});if(assert.deepEqual(e,t),assert(e.every((e=>A(e,64))),"Error: should have returned an array of hex BLOBs."),true)console.log("pregenerated BLOBs (id): "+e+" / "+t)}))}))})),describe("Signed",(function(){describe("Integers",(function(){it("decimal integers",(async function(){let e=await f.generateSignedIntegers(5,0,10,{userData:q});return v(e,"number",!0,"decimal integers")})),it("pregenerated decimal integers (date)",(async function(){let e=await f.generateSignedIntegers(5,0,10,{pregeneratedRandomization:S}),t=await f.generateSignedIntegers(5,0,10,{pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated decimal integers (date): "+e.data+" / "+t.data)})),it("pregenerated decimal integers (id)",(async function(){let e=await f.generateSignedIntegers(5,0,10,{pregeneratedRandomization:b}),t=await f.generateSignedIntegers(5,0,10,{pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated decimal integers (id): "+e.data+" / "+t.data)})),it("non-decimal integers",(async function(){let e=await f.generateSignedIntegers(5,0,10,{base:2,userData:q});return v(e,"string",!0,"non-decimal integers")})),it("pregenerated non-decimal integers (date)",(async function(){let e=await f.generateSignedIntegers(5,0,10,{base:2,pregeneratedRandomization:S}),t=await f.generateSignedIntegers(5,0,10,{base:2,pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated non-decimal integers (date): "+e.data+" / "+t.data)})),it("pregenerated non-decimal integers (id)",(async function(){let e=await f.generateSignedIntegers(5,0,10,{base:2,pregeneratedRandomization:b}),t=await f.generateSignedIntegers(5,0,10,{base:2,pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated non-decimal integers (id): "+e.data+" / "+t.data)}))})),describe("Integer Sequences",(function(){it("uniform decimal integer sequences",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{userData:q});return v(e,Array(3).fill("number"),!0,"uniform decimal integer sequences")})),it("uniform pregenerated decimal integer sequences (date)",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{pregeneratedRandomization:S}),t=await f.generateSignedIntegerSequences(3,5,0,10,{pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("uniform pregenerated decimal integer sequences (date): "),console.table(e.data),console.table(t.data)})),it("uniform pregenerated decimal integer sequences (id)",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{pregeneratedRandomization:b}),t=await f.generateSignedIntegerSequences(3,5,0,10,{pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("uniform pregenerated decimal integer sequences (id): "),console.table(e.data),console.table(t.data)})),it("uniform non-decimal integer sequences",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{base:2,userData:q});return v(e,Array(3).fill("string"),!0,"uniform non-decimal integer sequences")})),it("uniform pregenerated non-decimal integer sequences (date)",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:S}),t=await f.generateSignedIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("uniform pregenerated non-decimal integer sequences (date): "),console.table(e.data),console.table(t.data)})),it("uniform pregenerated non-decimal integer sequences (id)",(async function(){let e=await f.generateSignedIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:b}),t=await f.generateSignedIntegerSequences(3,5,0,10,{base:2,pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("uniform pregenerated non-decimal integer sequences (id): "),console.table(e.data),console.table(t.data)})),it("multiform integer sequences",(async function(){let e=await f.generateSignedIntegerSequences(4,m,p,E,{replacement:R,base:y,userData:q}),t=[];return y.every((e=>t.push(10==e?"number":"string"))),v(e,t,!0,"multiform integer sequences")})),it("multiform pregenerated integer sequences (date)",(async function(){let e=await f.generateSignedIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:S}),t=await f.generateSignedIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("multiform pregenerated integer sequences (date): "),console.table(e.data),console.table(t.data)})),it("multiform pregenerated integer sequences (id)",(async function(){let e=await f.generateSignedIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:b}),t=await f.generateSignedIntegerSequences(4,m,p,E,{replacement:R,base:y,pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("multiform pregenerated integer sequences (id): "),console.table(e.data),console.table(t.data)}))})),describe("Decimal Fractions",(function(){it("decimal fractions",(async function(){let e=await f.generateSignedDecimalFractions(5,4,{replacement:!1,userData:q});return v(e,"number",!0,"decimal fractions")})),it("pregenerated decimal fractions (date)",(async function(){let e=await f.generateSignedDecimalFractions(5,4,{replacement:!1,pregeneratedRandomization:S}),t=await f.generateSignedDecimalFractions(5,4,{replacement:!1,pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated decimal fractions (date): "+e.data+" / "+t.data)})),it("pregenerated decimal fractions (id)",(async function(){let e=await f.generateSignedDecimalFractions(5,4,{replacement:!1,pregeneratedRandomization:b}),t=await f.generateSignedDecimalFractions(5,4,{replacement:!1,pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated decimal fractions (id): "+e.data+" / "+t.data)}))})),describe("Gaussians",(function(){it("gaussians",(async function(){let e=await f.generateSignedGaussians(5,3.41,2.1,4,{userData:q});return v(e,"number",!0,"gaussians")})),it("pregenerated gaussians (date)",(async function(){let e=await f.generateSignedGaussians(5,3.41,2.1,4,{pregeneratedRandomization:S}),t=await f.generateSignedGaussians(5,3.41,2.1,4,{pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated gaussians (date): "+e.data+" / "+t.data)})),it("pregenerated gaussians (id)",(async function(){let e=await f.generateSignedGaussians(5,3.41,2.1,4,{pregeneratedRandomization:b}),t=await f.generateSignedGaussians(5,3.41,2.1,4,{pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated gaussians (id): "+e.data+" / "+t.data)}))})),describe("Strings",(function(){it("strings, lowercase English alphabet",(async function(){let e=await f.generateSignedStrings(3,5,w,{userData:q});return v(e,"string",!0,"strings, lowercase English alphabet")})),it("pregenerated strings, lowercase English alphabet (date)",(async function(){let e=await f.generateSignedStrings(3,5,w,{pregeneratedRandomization:S}),t=await f.generateSignedStrings(3,5,w,{pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated strings, lowercase English alphabet (date): "+e.data+" / "+t.data)})),it("pregenerated strings, lowercase English alphabet (id)",(async function(){let e=await f.generateSignedStrings(3,5,w,{pregeneratedRandomization:b}),t=await f.generateSignedStrings(3,5,w,{pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated strings, lowercase English alphabet (id): "+e.data+" / "+t.data)}))})),describe("UUIDs",(function(){it("UUIDs",(async function(){let e=await f.generateSignedUUIDs(3,{userData:q});return v(e,"UUID",!0,"UUIDs")})),it("pregenerated UUIDs (date)",(async function(){let e=await f.generateSignedUUIDs(3,{pregeneratedRandomization:S}),t=await f.generateSignedUUIDs(3,{pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated UUIDs (date): "+e.data+" / "+t.data)})),it("pregenerated UUIDs (id)",(async function(){let e=await f.generateSignedUUIDs(3,{pregeneratedRandomization:b}),t=await f.generateSignedUUIDs(3,{pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),true)console.log("pregenerated UUIDs (id): "+e.data+" / "+t.data)}))})),describe("BLOBs",(function(){it("BLOBs, 128-bit, base64",(async function(){let e=await f.generateSignedBlobs(3,128,{format:O,userData:q});return v(e,"base64",!0,"BLOBs, 128-bit, base64")})),it("BLOBs, 128-bit, hex",(async function(){let e=await f.generateSignedBlobs(3,128,{format:I,userData:q});return v(e,"128-hex",!0,"BLOBs, 128-bit, hex")})),it("pregenerated BLOBs (date)",(async function(){let e=await f.generateSignedBlobs(3,64,{format:O,pregeneratedRandomization:S}),t=await f.generateSignedBlobs(3,64,{format:O,pregeneratedRandomization:S});if(assert.deepEqual(e.data,t.data),assert(e.data.every((e=>_(e))),"Error: should have returned an array of base64 BLOBs."),true)console.log("pregenerated BLOBs (date): "+e.data+" / "+t.data)})),it("pregenerated BLOBs (id)",(async function(){let e=await f.generateSignedBlobs(3,64,{format:O,pregeneratedRandomization:b}),t=await f.generateSignedBlobs(3,64,{format:O,pregeneratedRandomization:b});if(assert.deepEqual(e.data,t.data),assert(e.data.every((e=>_(e))),"Error: should have returned an array of base64 BLOBs."),true)console.log("pregenerated BLOBs (id): "+e.data+" / "+t.data)}))})),describe("Tickets",(function(){it("create a single ticket",(async function(){let e=(await f.createTickets(1,!0))[0].ticketId;if(assert("string"==typeof e,"Error: should have returned a string, instead returned "+e),true)console.log("ticket id: "+e)})),it("listTickets(), singleton",(async function(){let e=await f.listTickets("singleton");if(Array.isArray(e))if(assert(e.every((e=>null==e.nextTicketId&&null==e.previousTicketId)),"Error: tickets returned were not of the correct type."),true)console.log("first ticket, singleton: "+JSON.stringify(e[0]))})),it("listTickets(), head",(async function(){let e=await f.listTickets("head");if(Array.isArray(e))if(assert(e.every((e=>null!=e.nextTicketId&&null==e.previousTicketId)),"Error: tickets returned were not of the correct type."),true)console.log("first ticket, head: "+JSON.stringify(e[0]))})),it("listTickets(), tail",(async function(){let e=await f.listTickets("tail");if(Array.isArray(e))if(assert(e.every((e=>null==e.nextTicketId&&null!=e.previousTicketId)),"Error: tickets returned were not of the correct type."),true)console.log("first ticket, tail: "+JSON.stringify(e[0]))})),it("getTicket()",(async function(){let e=(await f.createTickets(1,!0))[0].ticketId,t=await f.generateSignedUUIDs(1,{ticketId:e}),a=await f.getTicket(e);if(assert.deepEqual(t.data,a.result.random.data),true)console.log("original: "+t.data+" getTicket: "+a.result.data+" ticketId: "+e)}))})),describe("Other",(function(){it("verifySignature(random, signature)",(async function(){let e=await f.generateSignedIntegers(5,0,10),t=await f.verifySignature(e.random,e.signature);assert(t,"Error: should have been verified successfully."),t=await f.verifySignature(e.random,z(e.signature)),assert(!t,"Error: should not have been verified successfully.")})),it("getResult(serialNumber)",(async function(){let e=await f.generateSignedIntegers(5,0,10),t=e.random.serialNumber,a=await f.getResult(t);if(assert.deepEqual(e.data,a.random.data,"Error: the responses should have been the same."),true)console.log("original: "+e.data+" getResult: "+a.data+" serialNumber: "+t)}))}))})),describe("Caches",(function(){it("decimal integers without replacement (individual requests)",(async function(){let e=f.createIntegerCache(5,0,10,{replacement:!1,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h,"Should have thrown RandomOrgCacheEmptyError, instead threw "+e.message)}assert(e.isPaused(),"Error: cache should have been paused.");let t=null;try{t=e.get()}catch(e){if(e instanceof h)assert(!0===e.wasPaused(),"Should have been paused.");else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}for(e.resume();null==t;)try{t=e.get()}catch(e){if(e instanceof h)assert(!1===e.wasPaused(),"Should not have been paused."),await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"number"==typeof e)),"Error: should have returned an array of integers."),true)console.log("decimal integer cache, get(): "+t);let a=e.getCachedValues();assert(a>=0);let r=e.getBitsUsed();assert(r>=0);let n=e.getRequestsUsed();if(assert(n>=0),true)console.log("size of cache: "+a+" bits used: "+r+" requests used: "+n)})),it("non-decimal integer with replacement (bulk requests)",(async function(){let e=f.createIntegerCache(5,0,10,{base:16,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"string"==typeof e)),"Error: should have returned an array of strings."),true)console.log("non-decimal integer cache, get(): "+t)})),it("uniform decimal integer sequences with replacement (bulk requests)",(async function(){let e=f.createIntegerSequenceCache(3,5,0,10,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>e.every((e=>"number"==typeof e)))),"Error: should have returned a 2D array of integers."),true)console.log("uniform decimal integer sequence cache, get(): "),console.table(t)})),it("uniform non-decimal integer sequences with replacement (bulk requests)",(async function(){let e=f.createIntegerSequenceCache(3,5,0,10,{base:16,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>e.every((e=>"string"==typeof e)))),"Error: should have returned a 2D array of strings."),true)console.log("uniform non-decimal integer sequence cache, get(): "),console.table(t)})),it("multiform decimal integer sequences with replacement (bulk requests)",(async function(){let e=f.createIntegerSequenceCache(4,m,p,E,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>e.every((e=>"number"==typeof e)))),"Error: should have returned a 2D array of integers."),true)console.log("multiform decimal integer sequence cache, get(): "),console.table(t)})),it("multiform mixed-base integer sequences with replacement (bulk requests)",(async function(){let e=f.createIntegerSequenceCache(4,m,p,E,{base:y,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every(((e,t)=>e.every((e=>typeof e===(10==y[t]?"number":"string"))))),"Error: the type of the values in the 2D array was not as expected."),true)console.log("multiform mixed-base integer sequence cache, get(): "),console.table(t)})),it("decimal fractions without replacement (individual requests)",(async function(){let e=f.createDecimalFractionCache(5,4,{replacement:!1,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("decimal fraction cache, get(): "+t)})),it("decimal fractions with replacement (bulk requests)",(async function(){let e=f.createDecimalFractionCache(5,4,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("decimal fraction cache, get(): "+t)})),it("gaussians (bulk requests as gaussians are always chosen with replacement)",(async function(){let e=f.createGaussianCache(10,3.41,2.1,4,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"number"==typeof e)),"Error: should have returned an array of numbers."),true)console.log("gaussian cache, get(): "+t)})),it("strings with replacement (bulk requests)",(async function(){let e=f.createStringCache(5,5,w,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>"string"==typeof e)),"Error: should have returned an array of strings."),true)console.log("string cache, get(): "+t)})),it("UUIDs (bulk requests, always)",(async function(){let e=f.createUUIDCache(1,{cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>U(e))),"Error: should have returned an array of UUIDs."),true)console.log("UUID cache, get(): "+t)})),it("BLOBs, 128-bit, base64 (bulk requests, always)",(async function(){let e=f.createBlobCache(3,128,{format:O,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>_(e))),"Error: should have returned an array of base64 BLOBs."),true)console.log("base64-encoded blob cache, get(): "+t)})),it("BLOBs, 128-bit, hex (bulk requests, always)",(async function(){let e=f.createBlobCache(3,128,{format:I,cacheSize:4});e.stop();try{e.get(),assert.fail("Should have thrown RandomOrgCacheEmptyError.")}catch(e){assert(e instanceof h)}assert(e.isPaused()),e.resume();let t=null;for(;null==t;)try{t=e.get()}catch(e){if(e instanceof h)await new Promise((e=>setTimeout(e,50)));else assert.fail("Should have thrown RandomOrgCacheEmptyError, , instead threw "+e.message)}if(assert(t.every((e=>A(e,128))),"Error: should have returned an array of hex BLOBs."),true)console.log("hex-encoded blob cache, get(): "+t)}))})),describe("Final Usage",(function(){it("requests used",(async function(){let e=await f.getRequestsLeft();console.log(D-e)})),it("bits used",(async function(){let e=await f.getBitsLeft();console.log(T-e)}))}));let v=async function(e,t,a=!1,r=null){let n=await f.verifySignature(e.random,e.signature);if(assert(n),true)console.log(r+": "+e.data);if(Array.isArray(t))for(let a=0;a<e.data.length;a++)assert(e.data[a].every((e=>typeof e==t[a])));else if("UUID"===t)assert(e.data.every((e=>U(e))));else if("base64"===t)assert(e.data.every((e=>_(e))));else if("128-hex"===t){let t=e.random.size;assert(e.data.every((e=>A(e,t))))}else assert(e.data.every((e=>typeof e===t)));if(a)assert.deepEqual(e.random.userData,q)},U=function(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)},_=function(e){return/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(e)},A=function(e,t){return new RegExp("^([0-9a-f]{"+t/4+"})?$").test(e)},z=function(e){let t=e.split("");for(let e=1;e<t.length;e++)if(t[e]!=t[e-1]){let a=t[e];t[e]=t[e-1],t[e-1]=a;break}return t.join("")};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
